{"version":3,"sources":["components/PostItem.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","types/Error.ts","components/NewCommentForm.tsx","components/CommentItem.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostItem","post","isSelected","setSelectedPost","id","title","className","onClick","type","cn","PostsList","posts","selectedPostId","map","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","Error","client","NewCommentForm","postId","reloadComments","useState","name","email","errForm","setErrForm","setName","setEmail","setBody","isLoader","setIsLoader","errAdd","setErrAdd","onSubmit","e","preventDefault","prev","newComment","catch","finally","htmlFor","placeholder","value","onChange","target","CommentItem","comment","handleDelete","href","PostDetails","comments","setComments","None","error","setError","isForm","setIsForm","getComments","result","Load","useEffect","commentId","filter","length","UserSelector","selectedUser","setSelectedUser","isDropdown","setIsDropdown","users","setUsers","handleDropdown","role","user","onClickUser","App","setPosts","selectedPost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8c193caa.chunk.js","sourcesContent":["import { FC } from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  post: Post,\n  isSelected: boolean,\n  setSelectedPost: (post: Post | null) => void,\n};\n\nexport const PostItem: FC<Props> = ({ post, isSelected, setSelectedPost }) => {\n  const handlePostButton = () => {\n    setSelectedPost(isSelected ? null : post);\n  };\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">{post.id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {post.title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          onClick={handlePostButton}\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={cn(\n            'button',\n            'is-link',\n            { 'is-light': !isSelected },\n          )}\n        >\n          {!isSelected ? 'Open' : 'Close'}\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import { FC } from 'react';\nimport { Post } from '../types/Post';\nimport { PostItem } from './PostItem';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId: number | null,\n  setSelectedPost: (post: Post | null) => void,\n};\n\nexport const PostsList: FC<Props> = ({\n  posts,\n  selectedPostId,\n  setSelectedPost,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <PostItem\n              key={post.id}\n              post={post}\n              isSelected={post.id === selectedPostId}\n              setSelectedPost={setSelectedPost}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum Error {\n  None,\n  Load,\n}\n","import {\n  FC,\n  useState,\n  FormEvent,\n  SetStateAction,\n} from 'react';\nimport cn from 'classnames';\nimport { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  postId: number,\n  reloadComments: () => void,\n};\n\nexport const NewCommentForm: FC<Props> = ({ postId, reloadComments }) => {\n  const [errForm, setErrForm] = useState({\n    name: false,\n    email: false,\n    body: false,\n  });\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [isLoader, setIsLoader] = useState(false);\n  const [errAdd, setErrAdd] = useState(false);\n\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n\n    if (!name) {\n      setErrForm(prev => ({ ...prev, name: true }));\n    }\n\n    if (!email) {\n      setErrForm(prev => ({ ...prev, email: true }));\n    }\n\n    if (!body) {\n      setErrForm(prev => ({ ...prev, body: true }));\n    }\n\n    const newComment = {\n      postId,\n      name,\n      email,\n      body,\n    };\n\n    if (name && email && body) {\n      setIsLoader(true);\n\n      client.post<SetStateAction<Comment[]>>('/comments', newComment)\n        .then(() => {\n          setErrAdd(false);\n          setBody('');\n          reloadComments();\n        })\n        .catch(() => setErrAdd(true))\n        .finally(() => setIsLoader(false));\n    }\n  };\n\n  const onClear = () => {\n    setErrForm({\n      name: false,\n      email: false,\n      body: false,\n    });\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn(\n              'input',\n              { 'is-danger': errForm.name },\n            )}\n            value={name}\n            onChange={e => {\n              setName(e.target.value);\n              setErrForm(prev => ({ ...prev, name: false }));\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errForm.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errForm.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn(\n              'input',\n              { 'is-danger': errForm.email },\n            )}\n            value={email}\n            onChange={e => {\n              setEmail(e.target.value);\n              setErrForm(prev => ({ ...prev, email: false }));\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n          {errForm.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {errForm.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn(\n              'textarea',\n              { 'is-danger': errForm.body },\n            )}\n            value={body}\n            onChange={e => {\n              setBody(e.target.value);\n              setErrForm(prev => ({ ...prev, body: false }));\n            }}\n          />\n        </div>\n\n        {errForm.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn(\n              'button',\n              'is-link',\n              { 'is-loading': isLoader },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={onClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n      {errAdd && (\n        <div\n          className=\"notification is-danger\"\n        >\n          Comment wasn&quot;t sent, please try again!\n        </div>\n      )}\n    </form>\n  );\n};\n","import { FC } from 'react';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  comment: Comment,\n  handleDelete: (commentId: number) => void,\n};\n\nexport const CommentItem: FC<Props> = ({ comment, handleDelete }) => {\n  const {\n    name,\n    email,\n    body,\n    id,\n  } = comment;\n\n  const onDelete = () => {\n    handleDelete(id);\n  };\n\n  return (\n    <article className=\"message is-small\" data-cy=\"Comment\">\n      <div className=\"message-header\">\n        <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n          {name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={onDelete}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {body}\n      </div>\n    </article>\n  );\n};\n","import {\n  FC,\n  SetStateAction,\n  useEffect,\n  useState,\n} from 'react';\nimport cn from 'classnames';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { CommentItem } from './CommentItem';\nimport { client } from '../utils/fetchClient';\n\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { Error } from '../types/Error';\n\ntype Props = {\n  post: Post,\n};\n\nexport const PostDetails: FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoader, setIsLoader] = useState(false);\n  const [error, setError] = useState(Error.None);\n  const [isForm, setIsForm] = useState(false);\n  const { id, title, body } = post;\n\n  const getComments = () => {\n    client.get<SetStateAction<Comment[]>>(`/comments?postId=${post.id}`)\n      .then((result) => setComments(result))\n      .catch(() => setError(Error.Load))\n      .finally(() => setIsLoader(false));\n  };\n\n  useEffect(() => {\n    setIsLoader(true);\n    setIsForm(false);\n\n    getComments();\n  }, [post]);\n\n  const handleDelete = (commentId: number) => {\n    setComments(prev => (\n      prev.filter(comment => comment.id !== commentId)\n    ));\n\n    client.delete(`/comments/${commentId}`);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoader && <Loader />}\n\n          {!!error && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!comments.length\n            ? (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            ) : (\n              <>\n                <p className=\"title is-4\">Comments:</p>\n\n                {comments.map(comment => (\n                  <CommentItem\n                    key={comment.id}\n                    comment={comment}\n                    handleDelete={handleDelete}\n                  />\n                ))}\n              </>\n            )}\n\n          <button\n            onClick={() => setIsForm(true)}\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className={cn(\n              'button',\n              'is-link',\n              { 'is-hidden': isForm },\n            )}\n          >\n            Write a comment\n          </button>\n        </div>\n\n        {isForm && <NewCommentForm postId={id} reloadComments={getComments} />}\n      </div>\n    </div>\n  );\n};\n","import {\n  FC,\n  useEffect,\n  useState,\n} from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\nimport { Error } from '../types/Error';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  selectedUser: User | null,\n  setSelectedUser: (user: User) => void,\n  setError: (err: Error) => void,\n  setIsLoader: (arg: boolean) => void,\n};\n\nexport const UserSelector: FC<Props> = ({\n  selectedUser,\n  setSelectedUser,\n  setError,\n  setIsLoader,\n}) => {\n  const [isDropdown, setIsDropdown] = useState(false);\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    client.get<User[]>('/users')\n      .then((result) => setUsers(result))\n      .catch(() => setError(Error.Load));\n  }, []);\n\n  const handleDropdown = () => {\n    setIsDropdown(prev => !prev);\n  };\n\n  const onClickUser = (user: User) => {\n    setIsLoader(true);\n    handleDropdown();\n    setSelectedUser(user);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn(\n        'dropdown',\n        { 'is-active': isDropdown },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleDropdown}\n        >\n          <span>\n            {!selectedUser ? 'Choose a user' : selectedUser.name}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              onClick={() => onClickUser(user)}\n              href={`#user-${user.id}`}\n              className=\"dropdown-item\"\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import {\n  FC,\n  useEffect,\n  useState,\n  SetStateAction,\n} from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport cn from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { User } from './types/User';\nimport { Error } from './types/Error';\nimport { Post } from './types/Post';\n\nimport { client } from './utils/fetchClient';\n\nexport const App: FC = () => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [error, setError] = useState(Error.None);\n  const [isLoader, setIsLoader] = useState(false);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    setIsLoader(true);\n\n    client.get<SetStateAction<Post[]>>(`/posts?userId=${selectedUser?.id}`)\n      .then(result => setPosts(result))\n      .catch(() => setError(Error.Load))\n      .finally(() => setIsLoader(false));\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  setError={setError}\n                  setIsLoader={setIsLoader}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {error === Error.Load && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n                {isLoader && <Loader />}\n\n                {(selectedUser && !isLoader)\n                  && (posts.length\n                    ? (\n                      <PostsList\n                        posts={posts}\n                        selectedPostId={selectedPost ? selectedPost.id : null}\n                        setSelectedPost={setSelectedPost}\n                      />\n                    ) : (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    ))}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={cn(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && <PostDetails post={selectedPost} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}